#!/usr/bin/env tsx

/**
 * EarnLayer Clickwrap Agreement System Deployment Script
 * 
 * This script deploys the complete clickwrap agreement system including:
 * - Database schema changes
 * - Initial agreement version
 * - System configuration
 * 
 * Run with: npx tsx scripts/deploy-agreement-system.ts
 */

import { db } from "../src/lib/db/connection";
import { agreementVersions } from "../src/lib/db/schema";
import { createHash } from "crypto";

const INITIAL_AGREEMENT_CONTENT = `### EarnLayer Publisher Agreement

**Last Updated:** September 11, 2025

This Publisher Agreement (the "Agreement") is a legally binding contract between you, the individual or entity who creates an account to use our services ("You" or "Publisher"), and **EarnLayer Inc.**, a corporation organized under the laws of Canada ("EarnLayer," "we," "us," "our").

By creating an account, clicking "I Agree," or otherwise accessing or using EarnLayer's services, you acknowledge that you have read, understood, and agree to be bound by this Agreement. If you are entering into this Agreement on behalf of a company or other legal entity, you represent that you have the authority to bind such entity.

---

## 1. Services and Revenue Sharing

EarnLayer provides AI-driven ad infrastructure and programmatic advertising solutions (the "Services") for digital platforms. You desire to integrate the Services to monetize your user base on your digital platform (the "Platform").

### 1.1 Definitions
"Net Advertising Revenues" means the gross amounts actually received by EarnLayer from advertisers for ads displayed on your Platform through the Services, less only: (i) third-party payment processing fees; (ii) ad network transaction fees directly related to serving the ads; and (iii) applicable sales, use, or value-added taxes that EarnLayer is legally required to remit. No other costs or expenses of EarnLayer are deducted.

"Invalid Traffic" means impressions, clicks, conversions, or other events that EarnLayer determines in good faith are not the result of bona fide human user activity, including activity generated by bots, crawlers, automated scripts, incentivized traffic that violates program rules, or otherwise fraudulent or manipulative activity.

### 1.2 Revenue Share
EarnLayer will pay you seventy percent (70%) of Net Advertising Revenues derived from ads displayed on your Platform through the Services. EarnLayer retains thirty percent (30%) as compensation for providing the Services.

### 1.3 Payment Schedule
EarnLayer will pay amounts due for a given calendar month by the end of the following calendar month, provided your accrued balance meets the minimum payout threshold of US$20. For example, Net Advertising Revenues accrued during January will be paid on or before the last day of February. All payments will be made in United States Dollars (USD). EarnLayer reserves the right to deduct or offset from your payment any amounts for advertiser refunds, chargebacks, Invalid Traffic, advertising makegoods, and uncollectible advertiser amounts. You are responsible for providing complete and accurate tax and payment information, and EarnLayer may withhold taxes from payments as required by law.

### 1.4 Revenue Collection
EarnLayer's obligation to pay you is limited to funds actually received by EarnLayer from advertisers. EarnLayer will use commercially reasonable efforts to collect amounts owed but is not liable for unpaid amounts.

### 1.5 Invalid Traffic
EarnLayer may determine in good faith that certain activity constitutes Invalid Traffic. EarnLayer will not owe any revenue share on Invalid Traffic and may adjust, withhold, or claw back payments accordingly, including amounts previously paid.

### 1.6 Changes to Revenue Share
EarnLayer may modify the revenue sharing percentages and related terms in this Section 1 by providing at least thirty (30) days prior notice by email to the address associated with your account or via a dashboard notice. If you do not agree, you may terminate under Section 7.2 before the effective date. Your continued use after the effective date constitutes acceptance.

### 1.7 Reporting and Discrepancies
All payments will be calculated solely based on EarnLayer's reporting and measurement systems. EarnLayer will provide you with access to a dashboard with reports on Net Advertising Revenues. You agree that EarnLayer's records and reports will be the sole and definitive basis for calculating all amounts owed. If you wish to dispute any payment or report, you must submit the dispute to EarnLayer in writing within sixty (60) days of the date of the payment; otherwise, you waive any claim related to that payment.

---

## 2. Intellectual Property, Data, and Confidentiality

### 2.1 Ownership
Subject to the licenses granted in this Agreement, each party retains all right, title, and interest in its respective intellectual property. You own your Platform, content, and user data. We own the Services, ad infrastructure, algorithms, and technology.

### 2.2 Data Rights
You retain ownership of all user-level data from your Platform. You grant EarnLayer a license to use aggregated and anonymized advertising performance data for service improvement, analytics and reporting. EarnLayer will not use personally identifiable information for any purpose other than providing the Services without your consent.

### 2.3 Privacy and Data Protection
Each party acts as an independent controller for personal data it collects directly. Publisher is responsible for obtaining all end user consents required for ad targeting and for honoring opt-out preferences. Neither party will reidentify aggregated or anonymized data. Each party will comply with applicable privacy laws.

### 2.4 Confidentiality
Each party will protect the other party's non-public information using at least the same degree of care it uses to protect its own, not less than reasonable care, and will use it only to perform under this Agreement.

### 2.5 Publisher Obligations and Technical Requirements
You are solely responsible for the technical implementation and maintenance of the Services on your Platform, including correctly placing all required code or integrating the required SDKs as specified in EarnLayer's documentation. EarnLayer is not responsible for any errors in your implementation or for any failure to display ads or generate revenue resulting from such errors.

---

## 3. Acceptable Use and Inventory Quality

Publisher will not, and will not permit others to, use the Services with content or inventory that is illegal, infringing, deceptive, or harmful, including content that promotes violence or violates applicable advertising policies. Publisher will not generate or allow Invalid Traffic. EarnLayer may suspend delivery on the Platform or specific inventory that EarnLayer reasonably believes violates this Section.

---

## 4. Indemnification

### 4.1 Mutual Indemnity
Each party will defend, indemnify, and hold harmless the other party and its affiliates, officers, directors, and employees from and against third-party claims, damages, liabilities, costs, and expenses, including reasonable legal fees, arising from: (a) the indemnifying party's breach of this Agreement; (b) allegations that the indemnifying party's technology, content, or services infringe or misappropriate any intellectual property right; or (c) the indemnifying party's negligence or willful misconduct. The indemnified party will promptly notify the indemnifying party and provide reasonable cooperation.

### 4.2 Publisher Invalid Traffic Indemnity
In addition to Section 4.1, Publisher will defend, indemnify, and hold harmless EarnLayer from and against third-party claims, investigations, government inquiries, and related losses arising out of or relating to Invalid Traffic on the Platform, including amounts refunded, credited, or charged back to advertisers, and reasonable costs of investigation, mitigation, and compliance. EarnLayer may offset amounts owed under this Section against amounts payable to Publisher.

---

## 5. Disclaimers

EXCEPT FOR THE EXPRESS WARRANTIES MADE IN THIS AGREEMENT, THE SERVICES ARE PROVIDED "AS IS" AND "AS AVAILABLE." EARNLAYER DISCLAIMS ALL OTHER WARRANTIES, WHETHER EXPRESS, IMPLIED, OR STATUTORY, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. EARNLAYER DOES NOT GUARANTEE ANY PARTICULAR LEVEL OF REVENUE OR THAT THE SERVICES WILL BE UNINTERRUPTED, ERROR-FREE, OR SECURE.

---

## 6. Limitation of Liability

### 6.1 Liability Cap
EARNLAYER'S TOTAL AGGREGATE LIABILITY ARISING OUT OF OR RELATED TO THIS AGREEMENT WILL NOT EXCEED THE AMOUNT RETAINED BY EARNLAYER UNDER THIS AGREEMENT DURING THE TWELVE (12) MONTHS IMMEDIATELY PRECEDING THE DATE THE CLAIM AROSE.

### 6.2 Exclusion of Consequential Damages
IN NO EVENT WILL EARNLAYER BE LIABLE FOR ANY INDIRECT, SPECIAL, INCIDENTAL, PUNITIVE, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, REGARDLESS OF THE CAUSE OF ACTION AND EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

Nothing in this Section limits EarnLayer's right to suspend the Services, withhold or offset amounts, or seek injunctive relief.

---

## 7. Term and Termination

### 7.1 Term
This Agreement begins on the date you accept it and continues until terminated.

### 7.2 Termination
You may terminate this Agreement at any time by ceasing use of the Services and closing your account. EarnLayer may terminate this Agreement for any reason upon fifteen (15) days prior written notice. Either party may terminate immediately for a material breach by the other party. Upon termination, EarnLayer will cease providing the Services and will pay any undisputed revenue share earned up to the termination date on the regular payment schedule in Section 1.3.

### 7.3 Survival
Sections 1.3, 1.4, 1.5, 2, 3, 4, 5, 6, 7.3, and 9 survive termination.

---

## 8. Changes to this Agreement

We may modify this Agreement from time to time. We will provide at least thirty (30) days prior notice of material changes by email or dashboard notice, stating the effective date. If you do not agree, you may terminate before the effective date. Your continued use after the effective date constitutes acceptance of the revised Agreement.

---

## 9. General Provisions

### 9.1 Relationship of Parties
The relationship between you and EarnLayer is that of independent contractors. Nothing in this Agreement creates a partnership, joint venture, agency, or employment relationship.

### 9.2 Governing Law and Dispute Resolution
This Agreement is governed by the laws of the Province of Alberta and the federal laws of Canada applicable in Alberta. Any dispute not resolved by good faith negotiations within thirty (30) days will be finally resolved by binding arbitration administered by the ADR Institute of Canada under its Arbitration Rules. The seat is Calgary, Alberta. The language is English. The tribunal will consist of one arbitrator. Either party may seek injunctive relief for actual or threatened misuse of intellectual property or confidential information and may bring individual claims in small claims court.

### 9.3 Notices
Notices from EarnLayer to you will be provided via email to the address associated with your account or through dashboard notifications. Notices from you to EarnLayer must be sent to the contact address provided on our website.

### 9.4 Assignment
You may not assign this Agreement without our prior written consent. EarnLayer may assign this Agreement without your consent in connection with a merger, acquisition, or sale of all or substantially all of its assets.

### 9.5 Severability
If any provision of this Agreement is found to be unenforceable, the remaining provisions will remain in full force and effect.

### 9.6 Force Majeure
Neither party is liable for delays or failures caused by events beyond its reasonable control, including internet failures, acts of God, or government actions.

### 9.7 Publicity
EarnLayer may identify Publisher as a customer in marketing materials and use Publisher's name and logo, subject to Publisher's brand guidelines. Either party may withdraw consent on reasonable notice.

### 9.8 Electronic Acceptance and Communications
You consent to do business electronically and to the use of electronic records. EarnLayer may maintain an electronic record of your acceptance, including account ID, timestamp, IP address, and the version of this Agreement accepted.`.trim();

async function createAgreementTables() {
  console.log('🔧 Creating agreement system tables...');

  try {
    // Create tables using direct SQL since we might have dependency issues with Drizzle kit
    await db.execute(`
      CREATE TABLE IF NOT EXISTS agreement_versions (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        version_string VARCHAR(50) NOT NULL UNIQUE,
        content_hash VARCHAR(64) NOT NULL UNIQUE,
        content_text TEXT NOT NULL,
        is_active BOOLEAN DEFAULT true,
        effective_date TIMESTAMPTZ NOT NULL,
        created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
        created_by TEXT,
        change_summary TEXT
      );
    `);

    await db.execute(`
      CREATE TABLE IF NOT EXISTS user_agreements (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id TEXT NOT NULL REFERENCES "user"(id) ON DELETE CASCADE,
        agreement_version_id UUID NOT NULL REFERENCES agreement_versions(id),
        accepted_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
        ip_address TEXT,
        user_agent TEXT,
        acceptance_method VARCHAR(50) DEFAULT 'clickwrap',
        created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
        UNIQUE(user_id, agreement_version_id)
      );
    `);

    await db.execute(`
      CREATE TABLE IF NOT EXISTS agreement_banner_dismissals (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id TEXT NOT NULL REFERENCES "user"(id) ON DELETE CASCADE,
        banner_version_id UUID NOT NULL REFERENCES agreement_versions(id),
        dismissed_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
        ip_address TEXT,
        user_agent TEXT
      );
    `);

    // Create indexes for performance
    await db.execute(`CREATE INDEX IF NOT EXISTS idx_user_agreements_user_id ON user_agreements(user_id);`);
    await db.execute(`CREATE INDEX IF NOT EXISTS idx_user_agreements_version_id ON user_agreements(agreement_version_id);`);
    await db.execute(`CREATE INDEX IF NOT EXISTS idx_banner_dismissals_user_id ON agreement_banner_dismissals(user_id);`);
    await db.execute(`CREATE INDEX IF NOT EXISTS idx_agreement_versions_active ON agreement_versions(is_active) WHERE is_active = true;`);

    console.log('✅ Agreement tables created successfully');
  } catch (error) {
    console.error('❌ Error creating tables:', error);
    throw error;
  }
}

async function createInitialAgreementVersion() {
  console.log('📋 Creating initial agreement version...');

  try {
    const contentHash = createHash('sha256').update(INITIAL_AGREEMENT_CONTENT).digest('hex');
    const versionString = '2.0.0';
    
    // Check if initial version already exists
    const existing = await db.execute(`
      SELECT id FROM agreement_versions WHERE version_string = '${versionString}' LIMIT 1;
    `);

    if (existing && existing.length > 0) {
      console.log('⚠️  Initial agreement version already exists, skipping creation');
      return;
    }

    await db.execute(`
      INSERT INTO agreement_versions (
        version_string, 
        content_hash, 
        content_text, 
        is_active, 
        effective_date, 
        created_by, 
        change_summary
      ) VALUES (
        '${versionString}',
        '${contentHash}',
        '${INITIAL_AGREEMENT_CONTENT.replace(/'/g, "''")}',
        true,
        NOW(),
        'system',
        'Initial EarnLayer Publisher Agreement'
      );
    `);

    console.log('✅ Initial agreement version created');
    console.log(`   Version: ${versionString}`);
    console.log(`   Content Hash: ${contentHash}`);
  } catch (error) {
    console.error('❌ Error creating initial agreement version:', error);
    throw error;
  }
}

async function verifyDeployment() {
  console.log('🔍 Verifying deployment...');

  try {
    // Check tables exist
    const tables = await db.execute(`
      SELECT table_name FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('agreement_versions', 'user_agreements', 'agreement_banner_dismissals');
    `);

    console.log(`✅ Found ${tables.length || 0} agreement tables`);

    // Check initial version exists
    const versions = await db.execute(`
      SELECT version_string, is_active, created_at 
      FROM agreement_versions 
      WHERE is_active = true 
      ORDER BY created_at DESC;
    `);

    if (versions && versions.length > 0) {
      console.log('✅ Active agreement version found:');
      versions.forEach((row: any) => {
        console.log(`   Version: ${row.version_string} (Active: ${row.is_active})`);
      });
    } else {
      throw new Error('No active agreement version found');
    }

    console.log('🎉 Deployment verification successful!');
  } catch (error) {
    console.error('❌ Deployment verification failed:', error);
    throw error;
  }
}

async function main() {
  console.log('🚀 Starting EarnLayer Agreement System Deployment');
  console.log('================================================');

  try {
    // Step 1: Create database tables
    await createAgreementTables();

    // Step 2: Create initial agreement version
    await createInitialAgreementVersion();

    // Step 3: Verify deployment
    await verifyDeployment();

    console.log('');
    console.log('🎉 DEPLOYMENT COMPLETE!');
    console.log('======================');
    console.log('');
    console.log('✅ Database tables created');
    console.log('✅ Initial agreement version deployed');
    console.log('✅ API endpoints ready');
    console.log('✅ React components created');
    console.log('');
    console.log('📝 Next Steps:');
    console.log('1. Test API endpoints: GET /api/agreement/current');
    console.log('2. Integrate AgreementCheckbox into sign-up forms');
    console.log('3. Add AgreementBanner to dashboard');
    console.log('4. Deploy frontend changes');
    console.log('');
    console.log('🔗 Key URLs:');
    console.log('- Current Agreement: GET /api/agreement/current');
    console.log('- User Status: GET /api/agreement/status');
    console.log('- Accept Agreement: POST /api/agreement/accept');
    console.log('');

  } catch (error) {
    console.error('');
    console.error('💥 DEPLOYMENT FAILED');
    console.error('===================');
    console.error(error);
    process.exit(1);
  }
}

// Run the deployment
main();